{"version":3,"sources":["../src/index.js"],"names":["mitt","all","Object","create","on","type","handler","push","off","let","e","splice","indexOf","emit","evt","map"],"mappings":"AAIA,QAAwBA,GAAKC,GAG5B,MAFAA,GAAMA,GAAOC,OAAOC,OAAO,OAW1BC,GAAE,SAACC,EAAMC,IACPL,EAAII,KAAUJ,EAAII,QAAaE,KAAKD,IAWtCE,IAAG,SAACH,EAAMC,GACTG,GAAIC,GAAIT,EAAII,KAAUJ,EAAII,MAC1BK,GAAEC,OAAOD,EAAEE,QAAQN,KAAa,EAAG,IAYpCO,KAAI,SAACR,EAAMS,IACTb,EAAII,QAAaU,IAAI,SAACT,GAAcA,EAAQQ,MAC5Cb,EAAI,UAAYc,IAAI,SAACT,GAAcA,EAAQD,EAAMS","file":"mitt.js","sourcesContent":["/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nexport default function mitt(all) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type    Type of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @return {Object} the `mitt` instance for chaining\n\t\t * @memberOf mitt\n\t\t */\n\t\ton(type, handler) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type    Type of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @return {Object} the `mitt` instance for chaining\n\t\t * @memberOf mitt\n\t\t */\n\t\toff(type, handler) {\n\t\t\tlet e = all[type] || (all[type] = []);\n\t\t\te.splice(e.indexOf(handler) >>> 0, 1);\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked prior to type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @return {Object} the `mitt` instance for chaining\n\t\t * @memberof mitt\n\t\t */\n\t\temit(type, evt) {\n\t\t\t(all[type] || []).map((handler) => { handler(evt); });\n\t\t\t(all['*'] || []).map((handler) => { handler(type, evt); });\n\t\t}\n\t};\n}\n"]}